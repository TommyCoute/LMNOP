/*************************************************
 * Code coverage for lmnop apex
 * 
 * DATE			DEV		NOTES
 * 2019-02-01	TKC		Initial creation
 * 2019-02-18	TKC		Updated testUser method to allow generating multiple users
 * 2019-02-18	TKC		Added testManageMovieNight() for 100% coverage of manage movie night page
 * 2019-02-18	TKC		Added testRefreshments() for 100% coverage of refreshments page
 * 2019-02-18	TKC		Added testLogActivity() for 97% coverage of lmnopActivity class
 * 2019-02-18	TKC		Updated testNewMovieNight() and created methods for > 90% code coverage of MovieNightExtension class
 * 2019-02-19	TKC		Added testReminder() for 100% coverage of lmnopReminder and lmnopEmail.sendReminderEmail
 * 2019-02-20	TKC		Added testUnregisteredUserManager() for 100% coverage of new updateUnregisteredAudience features
*************************************************/
@isTest
private class lmnopTest {
    
    // test user for other methods    
    private static User testUser(Integer i) {
        // create test account
        Account acc = new Account();
        acc.Name = 'test' + i + ' account';
        acc.BillingState = 'CA';
        acc.BillingStreet = i + '123 Main St';
        acc.BillingCity = 'Beverly Hills';
        acc.BillingPostalCode = '90210';
        acc.Phone = '999-555-1234';
        System.debug('acc.Name: ' + acc.Name);
        insert acc;
        
        // set profile id
        // NOTE: MUST UPDATE PROFILE NAME TO MATCH COMMUNITY PROFILE
        String pId = [SELECT Name FROM Profile WHERE Name = 'Movie Night User'].Id;
        
        // create test contact
        Contact ct = new Contact();
        ct.FirstName = 'test';
        ct.LastName = String.valueOf(i);
        ct.Email = 'test' + i + '@example.com';
        ct.accountid = acc.id;
        insert ct;
        
        // create test user
        User u = new User();
        u.ContactID = ct.Id;
        u.Username = ct.Email;
        u.FirstName = ct.FirstName;
        u.LastName = ct.LastName;
        u.Email = ct.Email;
        u.Alias = 'test' + i;
        u.CommunityNickname = 'test' + i;
        u.TimeZoneSidKey = 'America/Los_Angeles';
        u.LocaleSidKey = 'en_US';
        u.EmailEncodingKey = 'ISO-8859-1';
        u.ProfileId = pId;
        u.LanguageLocaleKey='en_US';
        if (i == 0) {
            u.lmnop_Disclaimer_Acknowledged__c = DateTime.now();
        }
        insert u;
        return u;
    }
    
    // copied from CommunitiesSelfRegControllerTest
    private static testMethod void testRegistration() {
        lmnopRegistrationController con = new lmnopRegistrationController();
        con.firstName = 'FirstName';
        con.lastName = 'LastName';
        con.email = 'test@force.com';
        con.communityNickname = 'test';
        
        // registerUser will always return null when the page isn't accessed as a guest user
        System.assert(con.registerUser() == null);    
        
        con.password = 'abcd1234';
        con.confirmPassword = 'abcd123';
        System.assert(con.registerUser() == null);
    }
    
    private static testMethod void testWelcome() { 
        System.runAs(lmnopTest.testUser(1)) {
            Movie_Night__c nmn = new Movie_Night__c();
            PageReference pageRef = Page.MovieNight;
            Test.setCurrentPage(pageRef);
            ApexPages.StandardController sc = new ApexPages.StandardController(nmn);
            MovieNightExtension con = new MovieNightExtension(sc);
            
            // should return false before disclaimer is acknowledged
            System.assertEquals(false, con.acknowledged);
            
            // should return true after disclaimer is acknowledged
            con.recordAcknowledgement();
            System.assertEquals(true, con.acknowledged);
        }
    }
    
    private static testMethod void testNewMovieNight() {
        // create test users
        User testOrganizer = lmnopTest.testUser(0);       
        User testUser1 = lmnopTest.testUser(1);     
        User testUser2 = lmnopTest.testUser(2);       
        
        System.runAs(testOrganizer) {
            // prepare new movie night page
            Movie_Night__c nmn = new Movie_Night__c();
            PageReference pageRef = Page.ManageMovieNight;
            Test.setCurrentPage(pageRef);
            ApexPages.StandardController sc = new ApexPages.StandardController(nmn);
            MovieNightExtension con = new MovieNightExtension(sc);
            
            // user input
            con.contactIds = testUser1.ContactId;
            DateTime dt = DateTime.now() + 1;
            con.inputDate = String.valueOf(dt).replace(' ', 'T').left(16);
            nmn.Voting_Deadline_Offset_Value__c = 0;
            nmn.Voting_Deadline_Offset_Type__c = 'Minutes';
            nmn.Location__c = 'testing123';
            nmn.Unregistered_Audience__c = 'test2@example.com, unregistered@example.com';
            con.createMovieNight();
            
            // make sure new record was created
            List<Movie_Night__c> mnTest = [
                SELECT Id, Location__c
                FROM Movie_Night__c
                WHERE Location__c = 'testing123'
            ];
            System.assertEquals(1, mnTest.size());
            
            // prepare second new movie night page
            Movie_Night__c nmn2 = new Movie_Night__c();
            sc = new ApexPages.StandardController(nmn2);
            con = new MovieNightExtension(sc);
            
            // user input with date in past
            con.contactIds = '';
            dt = DateTime.now() - 1;
            con.inputDate = String.valueOf(dt).replace(' ', 'T').left(16);
            nmn2.Voting_Deadline_Offset_Value__c = 0;
            nmn2.Voting_Deadline_Offset_Type__c = 'Hours';
            nmn2.Location__c = 'testing123';
            con.createMovieNight();
            
            // make sure new record was created
            mnTest = [
                SELECT Id, Location__c, Showtime__c, Voting_Deadline__c
                FROM Movie_Night__c
                WHERE Location__c = 'testing123'
                ORDER BY CreatedDate ASC
            ];
            System.assertEquals(2, mnTest.size());
            
            // load calendar page
            pageRef = Page.MovieNight;
            Test.setCurrentPage(pageRef);
            sc = new ApexPages.StandardController(new Movie_Night__c());
            con = new MovieNightExtension(sc);
            
            // make sure the upcoming and past movie nights are loading
            System.assertEquals(1, con.mnsUpcoming.size());
            System.assertEquals(1, con.mnsPast.size());
            System.assertEquals(null, con.suggestedMovies);
            
            // load movie night record page
            PageReference pageRef2 = Page.MovieNight;
            pageRef2.getParameters().put('id', mnTest[0].Id);
            pageRef2.getParameters().put('titlesearch', 'test');
            Test.setCurrentPage(pageRef2);
            sc = new ApexPages.StandardController(mnTest[0]);
            con = new MovieNightExtension(sc);
            
            // toggle attending and check values
            Datetime st = mnTest[0].Showtime__c;
            System.assertEquals(st.format('E M/d/yyyy h:mm') + st.format('a').toLowerCase(), con.showTime);
            System.assertEquals(true, con.isAttending);
            con.toggleAttending();
            System.assertEquals(false, con.isAttending);
            con.toggleAttending();
        }
    }
    
    private static testMethod void testMovieNightSearch() {
        // prepare new movie night page
        Movie_Night__c nmn = new Movie_Night__c();
        PageReference pageRef = Page.MovieNight;
        pageRef.getParameters().put('titlesearch', 'test');
        Test.setCurrentPage(pageRef);
        ApexPages.StandardController sc = new ApexPages.StandardController(nmn);
        MovieNightExtension con = new MovieNightExtension(sc);
        
        // search for a movie title
        API_Tokens__c omdbToken = new API_Tokens__c();
        omdbToken.Name = 'OMDb';
        omdbToken.Token__c = 'test';
        insert omdbToken;
        Test.startTest();
        Test.setMock(HttpCalloutMock.class, new searchOmdbMock());
        con.searchOmdb();
        Test.stopTest();
    }
    
    private static testMethod void testMovieNightSuggest() {
        System.runAs(lmnopTest.testUser(0)) {
            // prepare new movie night page
            Movie_Night__c nmn = new Movie_Night__c();
            nmn.Showtime__c = DateTime.now() + 1;
            nmn.Voting_Deadline__c = DateTime.now() + 1;
            nmn.Location__c = 'test';
            insert nmn;
            PageReference pageRef = Page.MovieNight;
            pageRef.getParameters().put('imdb', 'test');
            Test.setCurrentPage(pageRef);
            ApexPages.StandardController sc = new ApexPages.StandardController(nmn);
            MovieNightExtension con = new MovieNightExtension(sc);
            
            // search for a movie title
            API_Tokens__c omdbToken = new API_Tokens__c();
            omdbToken.Name = 'OMDb';
            omdbToken.Token__c = 'test';
            insert omdbToken;
            Test.startTest();
            Test.setMock(HttpCalloutMock.class, new suggestMovieMock());
            con.suggestMovie();
            Test.stopTest();
        }
    }
    
    private static testMethod void testMovieNightVote() {
        // prepare test data
        User u = lmnopTest.testUser(0);
        Movie_Night__c nmn = new Movie_Night__c();
        nmn.Showtime__c = DateTime.now() + 1;
        nmn.Voting_Deadline__c = DateTime.now() + 1;
        nmn.Location__c = 'test';
        insert nmn;
        Movie_Audience__c ma = new Movie_Audience__c();
        ma.Attending__c = true;
        ma.Contact__c = u.ContactId;
        ma.Movie_Night__c = nmn.Id;
        insert ma;
        Movie_Suggestion__c ms1 = new Movie_Suggestion__c();
        ms1.Movie_Night__c = nmn.Id;
        ms1.Name = 'ms1';
        ms1.Year__c = '2000';
        insert ms1;
        Movie_Suggestion__c ms2 = new Movie_Suggestion__c();
        ms2.Movie_Night__c = nmn.Id;
        ms2.Name = 'ms2';
        ms2.Year__c = '1999';
        insert ms2;
        
        System.runAs(u) {
            // prepare movie night page
            PageReference pageRef = Page.MovieNight;
            pageRef.getParameters().put('selectedMovieSuggestionId', ms1.Id);
            Test.setCurrentPage(pageRef);
            ApexPages.StandardController sc = new ApexPages.StandardController(nmn);
            MovieNightExtension con = new MovieNightExtension(sc);
            
            // upvote first movie
            con.upvoteMovie();
            
            // verify movie was upvoted
            Double ms1Score = [SELECT Vote_Score__c FROM Movie_Suggestion__c WHERE Id = :ms1.Id].Vote_Score__c;
            System.assertEquals(1, ms1Score);
            
            // try to downvote first movie - should be ignored since user voted already
            con.downvoteMovie();
            
            // verify movie score did not change
            ms1Score = [SELECT Vote_Score__c FROM Movie_Suggestion__c WHERE Id = :ms1.Id].Vote_Score__c;
            System.assertEquals(1, ms1Score);
            
            // upvote second movie
            ApexPages.currentPage().getParameters().put('selectedMovieSuggestionId', ms2.Id);
            con.upvoteMovie();
            
            // verify movies are now tied
            Double ms2Score = [SELECT Vote_Score__c FROM Movie_Suggestion__c WHERE Id = :ms2.Id].Vote_Score__c;
            System.assertEquals(ms1Score, ms2Score);
            
            // try to submit tiebreaker vote - should be ignored since voting is still active
            con.tbVoteMovie();
            
            // verify movie score did not change
            ms2Score = [SELECT Vote_Score__c FROM Movie_Suggestion__c WHERE Id = :ms2.Id].Vote_Score__c;
            System.assertEquals(1, ms2Score);
            
            // change voting deadline and submit tiebreaker vote for second movie
            nmn.Voting_Deadline__c = DateTime.now();
            update nmn;
            con.tbVoteMovie();
            
            // verify tiebreaker vote was recorded this time
            System.assertEquals(1, con.tbVote.size());
                        
            // submit final movie vote for second movie
            con.finalVoteMovie();
            
            // verify second movie was selected
            String selectedMovie = [SELECT Movie_Title__c FROM Movie_Night__c WHERE Id = :nmn.Id].Movie_Title__c;
            System.assertEquals('ms2 (1999)', selectedMovie);
            System.assertEquals(1, con.topFinal.size());
        }
    }
    
    private static testMethod void testManageMovieNight() {
        // create test users
        User u = lmnopTest.testUser(0);       
        User previousUser = lmnopTest.testUser(1);     
        User confirmedUser = lmnopTest.testUser(2);       
        User unconfirmedUser = lmnopTest.testUser(3);
        
        // previous movie night data
        Movie_Night__c previousMN = new Movie_Night__c();
        insert previousMN;
        Movie_Audience__c previousMA1 = new Movie_Audience__c();
        previousMA1.Contact__c = previousUser.ContactId;
        previousMA1.Movie_Night__c = previousMN.Id;
        previousMA1.Attending__c = true;
        insert previousMA1;
        Movie_Audience__c previousMA2 = new Movie_Audience__c();
        previousMA2.Contact__c = u.ContactId;
        previousMA2.Movie_Night__c = previousMN.Id;
        previousMA2.Attending__c = true;
        insert previousMA2;

        // current movie night
        Movie_Night__c nmn = new Movie_Night__c();
        nmn.Location__c = 'test';
        nmn.Movie_Title__c = 'test';
        nmn.Showtime__c = Datetime.now();
        nmn.Voting_Deadline__c = Datetime.now();
        nmn.Voting_Deadline_Offset_Type__c = 'Minutes';
        nmn.Voting_Deadline_Offset_Value__c = 0;
        nmn.Unregistered_Audience__c = 'test4@example.com';
        insert nmn;
        
        // current movie audience
        Movie_Audience__c maSelf = new Movie_Audience__c();
        maSelf.Movie_Night__c = nmn.Id;
        maSelf.Contact__c = u.ContactId;
        maSelf.Attending__c = true;
        insert maSelf;
        
        Movie_Audience__c maConfirmed = new Movie_Audience__c();
        maConfirmed.Movie_Night__c = nmn.Id;
        maConfirmed.Contact__c = confirmedUser.ContactId;
        maConfirmed.Attending__c = true;
        insert maConfirmed;
        
        Movie_Audience__c maUnconfirmed = new Movie_Audience__c();
        maUnconfirmed.Movie_Night__c = nmn.Id;
        maUnconfirmed.Contact__c = unconfirmedUser.ContactId;
        maUnconfirmed.Attending__c = false;
        insert maUnconfirmed;
                
        // load manage movie night page as test user
        System.runAs(u) {
            PageReference pageRef = Page.ManageMovieNight;
            Test.setCurrentPage(pageRef);
            ApexPages.StandardController sc = new ApexPages.StandardController(nmn);
            MovieNightExtension con = new MovieNightExtension(sc);
            con.contactIds = '';
            con.newEmailAudience = '';
            con.removeContactIds = '';
            con.removeEmails = '';
            DateTime dt = DateTime.now() + 1;
            con.inputDate = String.valueOf(dt).replace(' ', 'T').left(16);
            
            // check values
            DateTime st = nmn.Showtime__c;
            System.assertEquals(String.valueOf(st).replace(' ', 'T').left(16), con.displayInputDate);
            String longST = st.format('EEEE M/d/yyyy h:mm') + st.format('a').toLowerCase() + ' ' + st.format('z');
            System.assertEquals(longST, con.longShowTime);
            System.assertEquals(1, con.previousAudience.size());
            System.assertEquals(1, con.confirmedAudience.size());
            System.assertEquals(1, con.unconfirmedAudience.size());
            System.assertEquals(1, con.unregisteredAudience.size());
            
            // update with audience changes
            con.contactIds = previousUser.ContactId;
            con.removeContactIds = unconfirmedUser.ContactId;
            con.removeEmails = 'test4@example.com';
            con.newEmailAudience = 'test1@example.com, test5@example.com';
            con.updateMovieNight();
            
            // check values for updates
            System.assertEquals(0, con.previousAudience.size());
            System.assertEquals(1, con.confirmedAudience.size());
            System.assertEquals(2, con.unconfirmedAudience.size());
            System.assertEquals(1, con.unregisteredAudience.size());
            
            // test with different voting deadline units
            nmn.Voting_Deadline_Offset_Value__c = 0;
            nmn.Voting_Deadline_Offset_Type__c = 'Hours';
            con.updateMovieNight();
            nmn.Voting_Deadline_Offset_Type__c = 'Days';
            con.updateMovieNight();
            
            // update location only this time to cover all email update variations
            con = new MovieNightExtension(sc);
            con.contactIds = '';
            con.newEmailAudience = '';
            con.removeContactIds = '';
            con.removeEmails = '';
            st = nmn.Showtime__c;
            con.inputDate = String.valueOf(st).replace(' ', 'T').left(16);
            nmn.Location__c = 'updated';
            con.updateMovieNight();
            
            // delete movie night
            con.deleteMovieNight();
            
            // reset page with blank record
            Movie_Night__c blank = new Movie_Night__c();
            sc = new ApexPages.StandardController(blank);
            con = new MovieNightExtension(sc);
            
            // confirm null values
            System.assertEquals(null, con.displayInputDate);
            System.assertEquals(null, con.longShowtime);
        }
    }
    
    private static testMethod void testRefreshments() {        
        // insert new movie night and audience records for test user
        User u = lmnopTest.testUser(0);
        
        Movie_Night__c nmn = new Movie_Night__c();
        nmn.Location__c = 'test';
        nmn.Movie_Title__c = 'test';
        nmn.Showtime__c = Datetime.now();
        nmn.Voting_Deadline__c = Datetime.now();
        insert nmn;
        
        Movie_Audience__c ma = new Movie_Audience__c();
        ma.Movie_Night__c = nmn.Id;
        ma.Contact__c = u.ContactId;
        ma.Attending__c = true;
        insert ma;
        
        // load refreshments page as test user
        System.runAs(u) {
            PageReference pageRef = Page.Refreshments;
            Test.setCurrentPage(pageRef);
            ApexPages.StandardController sc = new ApexPages.StandardController(nmn);
            MovieNightExtension con = new MovieNightExtension(sc);
            
            // should be no refreshments yet
            System.assertEquals(0, con.rContributors.size());
            System.assertEquals(0, con.refreshments.size());
            
            // submit refreshment
            con.newRefreshment = 'test';
            con.submitRefreshment();
            
            // should be 1 refreshment now
            System.assertEquals(1, con.rContributors.size());
            System.assertEquals(1, con.refreshments.size());
            
            // remove refreshment
            String rId = [SELECT Id FROM Refreshment__c WHERE Movie_Night__c = :nmn.Id LIMIT 1].Id;
            ApexPages.currentPage().getParameters().put('ritem', rId);
            con.removeItem();
            
            // should be 0 refreshments again
            System.assertEquals(0, con.refreshments.size());
            
            // reset page with blank record
            Movie_Night__c blank = new Movie_Night__c();
            sc = new ApexPages.StandardController(blank);
            con = new MovieNightExtension(sc);
            
            // confirm null values
            System.assertEquals(null, con.rContributors);
            System.assertEquals(null, con.refreshments);
        }
    }
    
    private static testMethod void testLogActivity() {
        System.runAs(lmnopTest.testUser(0)) {
            PageReference pageRef = Page.MovieNight;
            pageRef.getParameters().put('titleSearch', 'test');
            Test.setCurrentPage(pageRef);
            lmnopActivity con = new lmnopActivity();
            con.logActivity();
            
            // check values
            System.assertEquals('', con.gaId);
            System.assertEquals('', con.gaIP);
                        
            // insert google analytics token
            API_Tokens__c ga = new API_Tokens__c();
            ga.Name = 'Google_Analytics';
            ga.Token__c = 'test';
            insert ga;
            
            // verify google analytics token
            con = new lmnopActivity();
            con.logActivity();
            System.assertEquals('test', con.gaId);

            // test various IP address values
            ApexPages.currentPage().getHeaders().put('X-Forwarded-For', '1.1.1.1');
            con = new lmnopActivity();
            con.logActivity();
            System.assertEquals('1.1.1.1', con.gaIP);
            ApexPages.currentPage().getHeaders().put('X-Salesforce-SIP', '2.2.2.2');
            con = new lmnopActivity();
            con.logActivity();
            System.assertEquals('2.2.2.2', con.gaIP);
            ApexPages.currentPage().getHeaders().put('True-Client-IP', '3.3.3.3');
            con = new lmnopActivity();
            con.logActivity();
            System.assertEquals('3.3.3.3', con.gaIP);
        }
    }
    
    private static testMethod void testReminder() {
        Test.startTest();
        // create test data
        User u = lmnopTest.testUser(0);
        Movie_Night__c mn = new Movie_Night__c();
        mn.Showtime__c = DateTime.now().addHours(5);
        mn.Voting_Deadline__c = DateTime.now().addHours(5);
        insert mn;
        Movie_Audience__c ma = new Movie_Audience__c();
        ma.Attending__c = true;
        ma.Contact__c = u.ContactId;
        ma.Movie_Night__c = mn.Id;
        insert ma;
        
        // set cron expression and schedule apex job
        String cronExp = '0 0 * * * ?';
        String jobId = System.schedule('lmnopReminderTest', cronExp, new lmnopReminder());
        
        // verify job was scheduled
        CronTrigger ct = [SELECT Id, CronExpression FROM CronTrigger WHERE Id = :jobId];
        System.assertEquals(cronExp, ct.CronExpression);
        Test.stopTest();
    }
    
    private static testMethod void testUnregisteredUserManager() {
        // create test data
        Movie_Night__c mn = new Movie_Night__c();
        mn.Unregistered_Audience__c = 'test0@example.com, test1@example.com';
        insert mn;
        User newUser = lmnopTest.testUser(0);
        
        // verify that the new user has been moved from unregistered to movie audience
        Movie_Audience__c ma = [
            SELECT Contact__r.Email 
            FROM Movie_Audience__c 
            WHERE Movie_Night__c = :mn.Id
            LIMIT 1
        ];
        System.assertEquals('test0@example.com', ma.Contact__r.Email);
        String ua = [SELECT Unregistered_Audience__c FROM Movie_Night__c WHERE Id = :mn.Id].Unregistered_Audience__c;
        System.assert(!ua.contains('test0@example.com'));
    }
}