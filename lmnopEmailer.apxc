/*************************************************
 * lmnop email notification controller
 * Test code provided by lmnopTest
 * 
 * DATE			DEV		NOTES
 * 2019-02-13	TKC		Initial creation from MovieNightExtension
 * 2019-02-14	TKC		Moved common emailBody components into static methods, started sendUpdateEmail method
 * 2019-02-16	TKC		Added email updates to invited/uninvited unregistered audience
 * 2019-02-17	TKC		Added email updates to organizer
 * 2019-02-19	TKC		Added email reminder to attendees (called from lmnopReminder scheduled job)
*************************************************/

public class lmnopEmailer {
    
    // shared elements
    private static String container() {
        String html = '<div style="';
        html += 'background-color: #000000; ';
        html += 'background-image: url(\'https://lmnop.force.com/resource/1547665310000/MovieTheater\'); ';
        html += 'background-position: -325px -75px; ';
        html += 'color: #000000; ';
        html += 'font-family: Tahoma, sans-serif; ';
        html += 'max-width: 620px; ';
        html += 'padding: 15px;"';
        html += '>';
        return html;
    }
    private static String header(String headerText) {
        String html = '<img style="';
        html += 'color: #ffd700; ';
        html += 'font-family: sans-serif; ';
        html += 'font-size: 22px; ';
        html += 'font-weight: bold; ';
        html += 'margin-bottom: 10px; ';
        html += 'vertical-align: middle; ';
        html += 'width: 50px;" ';
        html += 'alt="lmnop" ';
        html += 'src="https://lmnop.force.com/servlet/servlet.ImageServer?id=0151U000000OKIA&oid=00D1U000000uHGX" ';
        html += '/>';
        html += '<span style="';
        html += 'color: #ffd700; ';
        html += 'font-size: 22px; ';
        html += 'font-weight: bold; ';
        html += 'line-height: 25px; ';
        html += 'padding: 10px; ';
        html += 'text-shadow: 0px 0px 5px #daa520; ';
        html += 'vertical-align: middle;"';
        html += '>' + headerText + '</span>';
        return html;
    }
    private static String panel() {
        String html = '<div style="';
        html += 'background-color: #ffffffc0; ';
        html += 'border-radius: 4px; ';
        html += 'padding: 10px;">';
        return html;
    }
    private static String greeting(String recipientName) {
        String html = '<p style="margin: 5px 0px;">';
        html += 'Hello ' + recipientName + ',</p>';
        return html;
    }
    private static String intro(String intro) {
        String html = '<p style="margin: 5px 0px;">' + intro + '</p>';
        return html;
    }
    private static String location(String location) {
        String html = '<p style="margin: 5px 0px;"><b>Location:</b> ' + location + '</p>';
        return html;
    }
    private static String updatedLocation(String newLocation, String oldLocation) {
        String html = '<p style="margin: 5px 0px;"><b>New Location:</b> ' + newLocation;
        html += ' <i>(changed from ' + oldLocation + ')</i></p>';
        return html;
    }
    private static String showtime(String showtime) {
        String html = '<p style="margin: 5px 0px;"><b>Showtime:</b> ' + showtime + '</p>';
        return html;
    }
    private static String updatedShowtime(String newShowtime, String oldShowtime) {
        String html = '<p style="margin: 5px 0px;"><b>New Showtime:</b> ' + newShowtime;
        html += ' <i>(changed from ' + oldShowtime + ')</i></p>';
        return html;
    }
    private static String deadline(String deadline) {
        String html = '<p style="margin: 5px 0px;"><b>Voting Deadline:</b> ' + deadline + '</p>';
        return html;
    }
    private static String updatedDeadline(String newDeadline, String oldDeadline) {
        String html = '<p style="margin: 5px 0px;"><b>New Voting Deadline:</b> ' + newDeadline;
        html += ' <i>(changed from ' + oldDeadline + ')</i></p>';
        return html;
    }
    private static String login(String message) {
        String html = '<p style="margin: 15px 0px 5px 0px;">' + message + ': ';
        html += '<a style="';
        html += 'font-weight: bold;" ';
        html += 'href="https://lmnop.force.com">lmnop.force.com</a></p>';
        return html;
    }
    private static String mnLink(String mnId, String message) {
        String html = '<p style="margin: 15px 0px 5px 0px;">' + message + ': ';
        html += '<a style="';
        html += 'font-weight: bold;" ';
        html += 'href="https://lmnop.force.com/movienight?id=' + mnId;
        html += '">lmnop.force.com/movienight?id=' + mnId + '</a></p>';
        return html;
    }
    private static String invited(Integer existing, Integer unregistered) {
        // check if "users" should be singular or plural
        String eUsers = 'users';
        if (existing == 1) {
            eUsers = 'user';
        }
        String uUsers = 'users';
        if (unregistered == 1) {
            uUsers = 'user';
        }
        // build html
        String html = '<p style="margin: 5px 0px;"><b>Invitations:</b> sent invitation email to ' + existing;
        html += ' existing lmnop ' + eUsers + ' and ' + unregistered + ' unregistered ' + uUsers + '</p>';
        return html;
    }
    private static String cancelled(Integer existing, Integer unregistered) {
        // check if "users" should be singular or plural
        String eUsers = 'users';
        if (existing == 1) {
            eUsers = 'user';
        }
        String uUsers = 'users';
        if (unregistered == 1) {
            uUsers = 'user';
        }
        // build html
        String html = '<p style="margin: 5px 0px;"><b>Cancellations:</b> sent cancellation email to ' + existing;
        html += ' existing lmnop ' + eUsers + ' and ' + unregistered + ' unregistered ' + uUsers + '</p>';
        return html;
    }
    private static String updated(Integer existing) {
        // check if "users" should be singular or plural
        String eUsers = 'users';
        if (existing == 1) {
            eUsers = 'user';
        }
        // build html
        String html = '<p style="margin: 5px 0px;"><b>Audience:</b> sent update email to ' + existing;
        html += ' existing lmnop ' + eUsers + '</p>';
        return html;
    }
    private static String closingTags() {
        String html = '</div></div>';
        return html;
    }
    
    // email notifications for new movie nights
    public static void sendInvitationEmail(Movie_Night__c mn, List<User> registeredUsers, String unregisteredEmailAddresses) {
        List<Messaging.SingleEmailMessage> allEmail = new List<Messaging.SingleEmailMessage>();
        String st = mn.Showtime__c.format('EEEE M/d/yyyy h:mm') + mn.Showtime__c.format('a').toLowerCase() + ' ' + mn.Showtime__c.format('z');
        String vd = mn.Voting_Deadline__c.format('EEEE M/d/yyyy h:mm') + mn.Voting_Deadline__c.format('a').toLowerCase() + ' ' + mn.Voting_Deadline__c.format('z');
        
        // prepare email for existing contacts
        for (User u : registeredUsers) {
            String emailBody = container() + header('New Movie Night') + panel();
            emailBody += greeting(u.FirstName);
            emailBody += intro(UserInfo.getName() + ' has invited you to a new movie night!');
            emailBody += location(mn.Location__c);
            emailBody += showtime(st);
            emailBody += deadline(vd);
            emailBody += login('Log in to your lmnop account to continue');
            emailBody += closingTags();
            Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
            email.setTargetObjectId(u.Id);
            email.setSubject('New Movie Night: ' + st + ' at ' + mn.Location__c);
            email.setHtmlBody(emailBody);
            email.setSaveAsActivity(false);
            email.setUseSignature(false);
            allEmail.add(email);
            System.debug('emailBody: ' + emailBody);
        }
        
        // prepare email for unregistered audience
        List<String> unregisteredRecipients = unregisteredEmailAddresses.split(',');
        Boolean errorEmailingUnregisteredRecipients = false;
        try {
            // log error and move on if the number of unregistered audience members exceeds the daily single email limit
            Messaging.reserveSingleEmailCapacity(unregisteredRecipients.size());
            for (String s : unregisteredRecipients) {
                String emailBody = container() + header('New Movie Night') + panel();
                emailBody += greeting('there');
                emailBody += intro(UserInfo.getName() + ' has invited you to a new movie night using the "little movie night online planner" (lmnop)!');
                emailBody += location(mn.Location__c);
                emailBody += showtime(st);
                emailBody += deadline(vd);
                emailBody += login('Sign in here to continue');
                emailBody += closingTags();
                Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
                List<String> toAddress = new List<String>();
                toAddress.add(s);
                email.setToAddresses(toAddress);
                email.setSubject('New Movie Night: ' + st + ' at ' + mn.Location__c);
                email.setHtmlBody(emailBody);
                email.setUseSignature(false);
                allEmail.add(email);
            }
        } Catch (Exception ex) {
            System.debug(ex);
            ApexPages.addMessages(ex);
            errorEmailingUnregisteredRecipients = true;
        }
        
        // send confirmation email to organizer
        String emailBody = container() + header('New Movie Night') + panel();
        emailBody += greeting(UserInfo.getFirstName());
        emailBody += intro('Your new movie night has been created!');
        emailBody += location(mn.Location__c);
        emailBody += showtime(st);
        emailBody += deadline(vd);
        emailBody += invited(registeredUsers.size(), unregisteredRecipients.size());
        if (errorEmailingUnregisteredRecipients) {
            emailBody += '<p><span style="color:#cc0000;"><b>ERROR:</b> something went wrong when trying to email your unregistered audience.</span></p>';
            emailBody += '<p>Sorry about that! Here are the email addresses that have not yet been contacted: ';
            for (String s : unregisteredRecipients) {
                emailBody += s + ', ';
            }
            emailBody = emailBody.removeEnd(', ');
            emailBody += '</p><p>You can also use this link to manually email audience members that have not registered yet: ';
            emailBody += '<a href="mailto:';
            for (String s : unregisteredRecipients) {
                emailBody += s + ',';
            }
            emailBody = emailBody.removeEnd(',');
            emailBody += '?subject=New Movie Night ' + st + ' at ' + mn.Location__c + '"><b>Compose new email message</b></a></p>';
        }
        emailBody += login('Log in to your lmnop account to continue');
        emailBody += closingTags();
        Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
        email.setTargetObjectId(UserInfo.getUserId());
        email.setSubject('New Movie Night: ' + st + ' at ' + mn.Location__c);
        email.setHtmlBody(emailBody);
        email.setSaveAsActivity(false);
        email.setUseSignature(false);
        allEmail.add(email);
        
        // send all email
        List<Messaging.Email> notifications = new List<Messaging.Email>();
        for (Messaging.SingleEmailMessage msem : allEmail) {
            notifications.add(msem);
        }
        System.debug('notifications.size(): ' + notifications.size());
        Messaging.sendEmail(notifications);
    }
    
    // email notifications for deleted movie nights
    public static void sendCancellationEmail(Movie_Night__c mn, List<User> registeredUsers, String unregisteredEmailAddresses) {
        try {
            List<Messaging.SingleEmailMessage> allEmail = new List<Messaging.SingleEmailMessage>();
            String st = mn.Showtime__c.format('EEEE M/d/yyyy h:mm') + mn.Showtime__c.format('a').toLowerCase() + ' ' + mn.Showtime__c.format('z');
            
            // prepare email for existing contacts
            for (User u : registeredUsers) {
                String emailBody = container() + header('Cancelled') + panel();
                emailBody += greeting(u.FirstName);
                emailBody += intro(UserInfo.getName() + ' has <b>cancelled</b> this movie night.');
                emailBody += location(mn.Location__c);
                emailBody += showtime(st);
                emailBody += closingTags();
                Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
                email.setTargetObjectId(u.Id);
                email.setSubject('Movie Night Cancelled: ' + st + ' at ' + mn.Location__c);
                email.setHtmlBody(emailBody);
                email.setSaveAsActivity(false);
                email.setUseSignature(false);
                allEmail.add(email);
                System.debug('emailBody: ' + emailBody);
            }
            
            // prepare email for unregistered audience
            List<String> unregisteredRecipients = unregisteredEmailAddresses.split(',');
            Boolean errorEmailingUnregisteredRecipients = false;
            try {
                // log error and move on if the number of unregistered audience members exceeds the daily single email limit
                Messaging.reserveSingleEmailCapacity(unregisteredRecipients.size());
                for (String s : unregisteredRecipients) {
                    String emailBody = container() + header('Cancelled') + panel();
                    emailBody += greeting('there');
                    emailBody += intro(UserInfo.getName() + ' has <b>cancelled</b> this movie night.');
                    emailBody += location(mn.Location__c);
                    emailBody += showtime(st);
                    emailBody += closingTags();
                    Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
                    List<String> toAddress = new List<String>();
                    toAddress.add(s);
                    email.setToAddresses(toAddress);
                    email.setSubject('Movie Night Cancelled: ' + st + ' at ' + mn.Location__c);
                    email.setHtmlBody(emailBody);
                    email.setUseSignature(false);
                    allEmail.add(email);
                }
            } Catch (Exception ex) {
                System.debug(ex);
                ApexPages.addMessages(ex);
                errorEmailingUnregisteredRecipients = true;
            }
            
            // send confirmation email to organizer
            String emailBody = container() + header('Cancelled') + panel();
            emailBody += greeting(UserInfo.getFirstName());
            emailBody += intro('Your movie night has been <b>deleted</b>!');
            emailBody += location(mn.Location__c);
            emailBody += showtime(st);
            emailBody += cancelled(registeredUsers.size(), unregisteredRecipients.size());
            if (errorEmailingUnregisteredRecipients) {
                emailBody += '<p><span style="color:#cc0000;"><b>ERROR:</b> something went wrong when trying to email your unregistered audience.</span></p>';
                emailBody += '<p>Sorry about that! Here are the email addresses that have not yet been contacted: ';
                for (String s : unregisteredRecipients) {
                    emailBody += s + ', ';
                }
                emailBody = emailBody.removeEnd(', ');
                emailBody += '</p><p>You can also use this link to manually email audience members that have not registered yet: ';
                emailBody += '<a href="mailto:';
                for (String s : unregisteredRecipients) {
                    emailBody += s + ',';
                }
                emailBody = emailBody.removeEnd(',');
                emailBody += '?subject=Movie Night Cancelled ' + st + ' at ' + mn.Location__c + '"><b>Compose new email message</b></a></p>';
            }
            emailBody += login('Log in to your lmnop account to continue');
            emailBody += closingTags();
            Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
            email.setTargetObjectId(UserInfo.getUserId());
            email.setSubject('Movie Night Cancelled: ' + st + ' at ' + mn.Location__c);
            email.setHtmlBody(emailBody);
            email.setSaveAsActivity(false);
            email.setUseSignature(false);
            allEmail.add(email);
            
            // send all email
            List<Messaging.Email> notifications = new List<Messaging.Email>();
            for (Messaging.SingleEmailMessage msem : allEmail) {
                notifications.add(msem);
            }
            System.debug('notifications.size(): ' + notifications.size());
            Messaging.sendEmail(notifications);
        } Catch (Exception ex) {
            System.debug(ex);
        }
    }
    
    // email notifications for updated movie nights
    public static void sendUpdateEmail(Movie_Night__c newMN, Movie_Night__c oldMN, List<User> existingUsers, List<User> invitedUsers, List<User> uninvitedUsers) {
        List<Messaging.SingleEmailMessage> allEmail = new List<Messaging.SingleEmailMessage>();
        String newST = newMN.Showtime__c.format('EEEE M/d/yyyy h:mm') + newMN.Showtime__c.format('a').toLowerCase() + ' ' + newMN.Showtime__c.format('z');
        String oldST = oldMN.Showtime__c.format('EEEE M/d/yyyy h:mm') + oldMN.Showtime__c.format('a').toLowerCase() + ' ' + oldMN.Showtime__c.format('z');
        String newVD = newMN.Voting_Deadline__c.format('EEEE M/d/yyyy h:mm') + newMN.Voting_Deadline__c.format('a').toLowerCase() + ' ' + newMN.Voting_Deadline__c.format('z');
        String oldVD = oldMN.Voting_Deadline__c.format('EEEE M/d/yyyy h:mm') + oldMN.Voting_Deadline__c.format('a').toLowerCase() + ' ' + oldMN.Voting_Deadline__c.format('z');
        Set<String> newUnregisteredAudience = new Set<String>(newMN.Unregistered_Audience__c.split(','));
        Set<String> oldUnregisteredAudience = new Set<String>(oldMN.Unregistered_Audience__c.split(','));
        
        // prepare update to existing audience
        if (newMN.Showtime__c != oldMN.Showtime__c || newMN.Voting_Deadline__c != oldMN.Voting_Deadline__c || newMN.Location__c != oldMN.Location__c) {
            for (User u : existingUsers) {
                String emailBody = container() + header('Update') + panel();
                emailBody += greeting(u.FirstName);
                emailBody += intro(UserInfo.getName() + ' has updated the movie night!');
                if (newMN.Location__c == oldMN.Location__c) {
                    emailBody += location(newMN.Location__c);
                } else {
                    emailBody += updatedLocation(newMN.Location__c, oldMN.Location__c);
                }
                if (newST == oldST) {
                    emailBody += showtime(newST);
                } else {
                    emailBody += updatedShowtime(newST, oldST);
                }
                if (newVD == oldVD) {
                    emailBody += deadline(newVD);
                } else {
                    emailBody += updatedDeadline(newVD, oldVD);
                }
                emailBody += login('Log in to your lmnop account to continue');
                emailBody += closingTags();
                Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
                email.setTargetObjectId(u.Id);
                email.setSubject('Updated Movie Night: ' + newST + ' at ' + newMN.Location__c);
                email.setHtmlBody(emailBody);
                email.setSaveAsActivity(false);
                email.setUseSignature(false);
                allEmail.add(email);
                System.debug('emailBody: ' + emailBody);
            }
        }
        
        // prepare new invitations for existing contacts
        for (User u : invitedUsers) {
            String emailBody = container() + header('New Movie Night') + panel();
            emailBody += greeting(u.FirstName);
            emailBody += intro(UserInfo.getName() + ' has invited you to a new movie night!');
            emailBody += location(newMN.Location__c);
            emailBody += showtime(newST);
            emailBody += deadline(newVD);
            emailBody += login('Log in to your lmnop account to continue');
            emailBody += closingTags();
            Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
            email.setTargetObjectId(u.Id);
            email.setSubject('New Movie Night: ' + newST + ' at ' + newMN.Location__c);
            email.setHtmlBody(emailBody);
            email.setSaveAsActivity(false);
            email.setUseSignature(false);
            allEmail.add(email);
            System.debug('emailBody: ' + emailBody);
        }
        
        // prepare new invitations for unregistered audience
        List<String> invitedUA = new List<String>();
        for (String s : newUnregisteredAudience) {
            if (!oldUnregisteredAudience.contains(s)) {
                invitedUA.add(s);
            }
        }
        Boolean errorInvitingUA = false;
        try {
            // log error and move on if the number of unregistered invitees exceeds the daily single email limit
            Messaging.reserveSingleEmailCapacity(invitedUA.size());
            for (String s : invitedUA) {
                if (s.length() > 5) {
                    System.debug('s: ' + s);
                    String emailBody = container() + header('New Movie Night') + panel();
                    emailBody += greeting('there');
                    emailBody += intro(UserInfo.getName() + ' has invited you to a new movie night using the "little movie night online planner" (lmnop)!');
                    emailBody += location(newMN.Location__c);
                    emailBody += showtime(newST);
                    emailBody += deadline(newVD);
                    emailBody += login('Sign in here to continue');
                    emailBody += closingTags();
                    Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
                    List<String> toAddress = new List<String>();
                    toAddress.add(s);
                    email.setToAddresses(toAddress);
                    email.setSubject('New Movie Night: ' + newST + ' at ' + newMN.Location__c);
                    email.setHtmlBody(emailBody);
                    email.setUseSignature(false);
                    allEmail.add(email);
                }
            }
        } Catch (Exception ex) {
            System.debug(ex);
            ApexPages.addMessages(ex);
            errorInvitingUA = true;
        }
        
        // prepare cancellation for existing contacts
        for (User u : uninvitedUsers) {
            String emailBody = container() + header('Cancelled') + panel();
            emailBody += greeting(u.FirstName);
            emailBody += intro(UserInfo.getName() + ' has <b>cancelled</b> this movie night.');
            emailBody += location(oldMN.Location__c);
            emailBody += showtime(oldST);
            emailBody += closingTags();
            Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
            email.setTargetObjectId(u.Id);
            email.setSubject('Movie Night Cancelled: ' + oldST + ' at ' + oldMN.Location__c);
            email.setHtmlBody(emailBody);
            email.setSaveAsActivity(false);
            email.setUseSignature(false);
            allEmail.add(email);
            System.debug('emailBody: ' + emailBody);
        }
        
        // prepare cancellation for unregistered audience
        List<String> uninvitedUA = new List<String>();
        for (String s : oldUnregisteredAudience) {
            if (!newUnregisteredAudience.contains(s)) {
                uninvitedUA.add(s);
            }
        }
        Boolean errorUninvitingUA = false;
        try {
            // log error and move on if the number of unregistered uninvitees exceeds the daily single email limit
            Messaging.reserveSingleEmailCapacity(uninvitedUA.size());
            for (String s : uninvitedUA) {
                if (s.length() > 5) {
                    String emailBody = container() + header('Cancelled') + panel();
                    emailBody += greeting('there');
                    emailBody += intro(UserInfo.getName() + ' has <b>cancelled</b> this movie night.');
                    emailBody += location(oldMN.Location__c);
                    emailBody += showtime(oldST);
                    emailBody += closingTags();
                    Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
                    List<String> toAddress = new List<String>();
                    toAddress.add(s);
                    email.setToAddresses(toAddress);
                    email.setSubject('Movie Night Cancelled: ' + oldST + ' at ' + oldMN.Location__c);
                    email.setHtmlBody(emailBody);
                    email.setUseSignature(false);
                    allEmail.add(email);
                }
            }
        } Catch (Exception ex) {
            System.debug(ex);
            ApexPages.addMessages(ex);
            errorUninvitingUA = true;
        }
        
        // send confirmation email to organizer
        String emailBody = container() + header('Update') + panel();
        emailBody += greeting(UserInfo.getFirstName());
        emailBody += intro('Your movie night has been updated!');
        if (newMN.Location__c == oldMN.Location__c) {
            emailBody += location(newMN.Location__c);
        } else {
            emailBody += updatedLocation(newMN.Location__c, oldMN.Location__c);
        }
        if (newST == oldST) {
            emailBody += showtime(newST);
        } else {
            emailBody += updatedShowtime(newST, oldST);
        }
        if (newVD == oldVD) {
            emailBody += deadline(newVD);
        } else {
            emailBody += updatedDeadline(newVD, oldVD);
        }
        if (newMN.Location__c != oldMN.Location__c || newST != oldST || newVD != oldVD) {
            emailBody += updated(existingUsers.size());
        }
        if (invitedUsers.size() > 0 || invitedUA.size() > 0) {
            emailBody += invited(invitedUsers.size(), invitedUA.size());
        }
        if (errorInvitingUA) {
            emailBody += '<p><span style="color:#cc0000;"><b>ERROR:</b> something went wrong when trying to send email invitations to your unregistered audience.</span><br/>';
            emailBody += 'Sorry about that! Here are the email addresses that have not yet been contacted: ';
            for (String s : invitedUA) {
                emailBody += s + ', ';
            }
            emailBody = emailBody.removeEnd(', ');
            emailBody += '<br/>You can also use this link to manually email audience members that have not registered yet: ';
            emailBody += '<a href="mailto:';
            for (String s : invitedUA) {
                emailBody += s + ',';
            }
            emailBody = emailBody.removeEnd(',');
            emailBody += '?subject=New Movie Night ' + newST + ' at ' + newMN.Location__c + '">Compose new email message</a></p>';
        }
        if (uninvitedUsers.size() > 0 || uninvitedUA.size() > 0) {
            emailBody += cancelled(uninvitedUsers.size(), uninvitedUA.size());
        }
        if (errorUninvitingUA) {
            emailBody += '<p><span style="color:#cc0000;"><b>ERROR:</b> something went wrong when trying to send email cancellations to your unregistered audience.</span><br/>';
            emailBody += 'Sorry about that! Here are the email addresses that have not yet been contacted: ';
            for (String s : uninvitedUA) {
                emailBody += s + ', ';
            }
            emailBody = emailBody.removeEnd(', ');
            emailBody += '<br/>You can also use this link to manually email audience members that have not registered yet: ';
            emailBody += '<a href="mailto:';
            for (String s : uninvitedUA) {
                emailBody += s + ',';
            }
            emailBody = emailBody.removeEnd(',');
            emailBody += '?subject=Movie Night Cancelled ' + newST + ' at ' + newMN.Location__c + '">Compose new email message</a></p>';
        }
        emailBody += login('Log in to your lmnop account to continue');
        emailBody += closingTags();
        Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
        email.setTargetObjectId(UserInfo.getUserId());
        email.setSubject('Updated Movie Night: ' + newST + ' at ' + newMN.Location__c);
        email.setHtmlBody(emailBody);
        email.setSaveAsActivity(false);
        email.setUseSignature(false);
        allEmail.add(email);
        
        // send all email
        List<Messaging.Email> notifications = new List<Messaging.Email>();
        for (Messaging.SingleEmailMessage msem : allEmail) {
            notifications.add(msem);
        }
        System.debug('notifications.size(): ' + notifications.size());
        Messaging.sendEmail(notifications);
    }
    
    // email reminder for upcoming movie nights
    public static void sendReminderEmail(List<Movie_Audience__c> upcomingAttendees, Map<Id, User> userMap) {
        List<Messaging.SingleEmailMessage> allEmail = new List<Messaging.SingleEmailMessage>();
        
        // prepare email for each attendee, if an active user record is found
        for (Movie_Audience__c ma : upcomingAttendees) {
            User u = userMap.get(ma.Contact__c);
            if (u != null) {
                String st = ma.Movie_Night__r.Showtime__c.format('EEEE M/d/yyyy h:mm') + ma.Movie_Night__r.Showtime__c.format('a').toLowerCase() + ' ' + ma.Movie_Night__r.Showtime__c.format('z');
                String vd = ma.Movie_Night__r.Voting_Deadline__c.format('EEEE M/d/yyyy h:mm') + ma.Movie_Night__r.Voting_Deadline__c.format('a').toLowerCase() + ' ' + ma.Movie_Night__r.Voting_Deadline__c.format('z');
                String emailBody = container() + header('Movie Night Reminder') + panel();
                emailBody += greeting(u.FirstName);
                emailBody += intro('The deadline to suggest and vote on movies is coming up for your movie night!');
                emailBody += location(ma.Movie_Night__r.Location__c);
                emailBody += showtime(st);
                emailBody += '<b>' + deadline(vd) + '</b>';
                emailBody += mnLink(ma.Movie_Night__r.Id, 'Log in to your lmnop account to continue');
                emailBody += closingTags();
                Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
                email.setTargetObjectId(u.Id);
                email.setSubject('New Movie Night: ' + st + ' at ' + ma.Movie_Night__r.Location__c);
                email.setHtmlBody(emailBody);
                email.setSaveAsActivity(false);
                email.setUseSignature(false);
                email.setReplyTo(ma.Movie_Night__r.Organizer_Email__c);
                email.setSenderDisplayName(ma.Movie_Night__r.CreatedBy.Name);
                allEmail.add(email);
                System.debug('emailBody: ' + emailBody);
            }
        }
        
        // send all email
        List<Messaging.Email> notifications = new List<Messaging.Email>();
        for (Messaging.SingleEmailMessage msem : allEmail) {
            notifications.add(msem);
        }
        System.debug('notifications.size(): ' + notifications.size());
        Messaging.sendEmail(notifications);
    }
}