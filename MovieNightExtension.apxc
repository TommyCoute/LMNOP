/*************************************************
 * lmnop Movie Night Controller Extension
 * Test code provided by lmnopTest
 * 
 * DATE			DEV		NOTES
 * 2019-01-14	TKC		Initial creation
 * 2019-01-15	TKC		Removed login controls (sticking with standard controllers)
 * 2019-01-17	TKC		Added lmnop disclaimer acknowledgement
 * 2019-01-18	TKC		Added new movie night submission controls
 * 2019-01-22	TKC		Added mnWrapped inner class and replaced "nms" movie night list with new custom list
 * 2019-01-23	TKC		Added showtime getter to return reformetted showtime
 * 2019-01-23	TKC		Added isAttending getter and toggleAttending() method
 * 2019-01-23	TKC		Added placeholder updateMovieNight() and deleteMovieNight() methods
 * 2019-01-24	TKC		Added getters for managing existing movie night audiences
 * 2019-01-24	TKC		Refactored to use "mn" movie night record instead of querying again througout class 
 * 						NOTE: requires adding input fields on each VF page for each field used in class
 * 2019-01-24	TKC		Completed updateMovieNight() and deleteMovieNight() methods
 * 2019-01-27	TKC		Updated unregisteredAudience getter to never return null value
 * 2019-01-27	TKC		Added initial refreshments getter for movie night detail page
 * 2019-02-01	TKC		Added access modifier "without sharing" to compensate for more strict OWD
 * 2019-02-02	TKC		Added getters for movie night refreshments tab (grouping by attending audience)
 * 2019-02-04	TKC		Updated createMovieNight() to set Attending__c to true for creator
 * 2019-02-04	TKC		Created new longShowtime getter for improved formatting
 * 2019-02-04	TKC		Created updateContactWithUser method to be called from UserTrigger
 * 2019-02-05	TKC		Added support for voting on suggested movies
*************************************************/

public without sharing class MovieNightExtension {
    
    // extend movie night standard controller
    private final Movie_Night__c mn;
    public MovieNightExtension(ApexPages.StandardController stdController) {
        this.mn = (Movie_Night__c)stdController.getRecord();
        this.mnsUpcoming = new List<maWrapped>();
        for (Movie_Audience__c ma : [
            SELECT Id, Movie_Night__r.Id, Movie_Night__r.Showtime__c, Movie_Night__r.Movie_Title__c,
            Movie_Night__r.Location__c, Movie_Night__r.Countdown__c, Movie_Night__r.CreatedBy.Id, Attending__c
            FROM Movie_Audience__c 
            WHERE Contact__c = :contactId AND Movie_Night__r.Showtime__c > :Datetime.now()
            ORDER BY Movie_Night__r.Showtime__c ASC
        ]) {
            mnsUpcoming.add(new maWrapped(ma));
        }
        this.mnsPast = new List<maWrapped>();
        for (Movie_Audience__c ma : [
            SELECT Id, Movie_Night__r.Id, Movie_Night__r.Showtime__c, Movie_Night__r.Movie_Title__c,
            Movie_Night__r.Location__c, Movie_Night__r.Countdown__c, Movie_Night__r.CreatedBy.Id, Attending__c
            FROM Movie_Audience__c 
            WHERE Contact__c = :contactId AND Movie_Night__r.Showtime__c <= :Datetime.now()
            ORDER BY Movie_Night__r.Showtime__c DESC
        ]) {
            mnsPast.add(new maWrapped(ma));
        }
    }
    
    // get current user's contact id
    public String contactId = [SELECT ContactId FROM User WHERE Id = :UserInfo.getUserId()].ContactId;
    
    // check disclaimer acknowledgement
    public Boolean acknowledged {
        get {
            DateTime aDate = [
                SELECT lmnop_Disclaimer_Acknowledged__c 
                FROM User 
                WHERE Id = :UserInfo.getUserId()
            ].lmnop_Disclaimer_Acknowledged__c;
            if (aDate != null) {
                return true;
            } else {
                return false;
            }
        }
    }
    
    // set disclaimer acknowledgement
    public PageReference recordAcknowledgement() {
        // set the custom acknowledged date/time to now
        User currentUser = [
            SELECT Id, lmnop_Disclaimer_Acknowledged__c
            FROM User
            WHERE Id = :UserInfo.getUserId()
        ];
        currentUser.lmnop_Disclaimer_Acknowledged__c = DateTime.now();
        update currentUser;
        
        // take the user to the profile page so they can update their profile etc
        PageReference page = System.Page.Profile;
        page.setRedirect(true);
        return page;
    }
    
    // update contact name to match user name changes
    public static void updateContactWithUser(List<User> updatedUsers) {
        List<User> usersWithContacts = new List<User>();
        List<String> contactIds = new List<String>();
        for (User u : updatedUsers) {
            if (u.ContactId != null) {
                usersWithContacts.add(u);
                contactIds.add(u.ContactId);
            }
        }
        List<Contact> contactsWithUpdatedUsers = [
            SELECT Id, FirstName, LastName
            FROM Contact
            WHERE Id IN :contactIds
        ];
        for (Integer i = 0; i < usersWithContacts.size(); i++) {
            contactsWithUpdatedUsers[i].FirstName = usersWithContacts[i].FirstName;
            contactsWithUpdatedUsers[i].LastName = usersWithContacts[i].LastName;
        }
        update contactsWithUpdatedUsers;
    }
    
    // get list of movie nights for current user
    public List<maWrapped> mnsUpcoming {get;set;}
    public List<maWrapped> mnsPast {get;set;}
    
    // wrapper for modifying the showtime datetime format within the list of movie nights
    public class maWrapped {
        public Movie_Audience__c maRecord {get;set;}
        public String formattedShowtime {
            get {
                return maRecord.Movie_Night__r.Showtime__c.format('EEEEE M/d/yyyy h:mm') 
                    + maRecord.Movie_Night__r.Showtime__c.format('a').toLowerCase();
            }
        }
        
        // contructors for wrapper class
        public maWrapped() {}
        public maWrapped(Movie_Audience__c ma) {
            this();
            this.maRecord = ma;
        }
    }
    
    // return list of previous audience members
    public List<Contact> previousAudience {
        get {
            List<Contact> contacts = new List<Contact>();
            
            // build list of movie nights for the current user
            List<Movie_Audience__c> myMovieNights = [
                SELECT Id, Contact__c, Movie_Night__c 
                FROM Movie_Audience__c
                WHERE Contact__c = :contactId
            ];
            List<String> movieNightIds = new List<String>();
            for (Movie_Audience__c ma : myMovieNights) {
                movieNightIds.add(ma.Movie_Night__c);
            }
            
            // build list of contactIds already invited to exclude (for managing existing movie nights)
            List<String> excludeContactIds = new List<String>();
            for (Contact c : confirmedAudience) {
                excludeContactIds.add(c.Id);
            }
            for (Contact c : unconfirmedAudience) {
                excludeContactIds.add(c.Id);
            }
            
            // build list of contacts from the user's previous movie nights
            List<Movie_Audience__c> myContacts = [
                SELECT Id, Contact__r.Id, Contact__r.FirstName, Contact__r.LastName, Movie_Night__c
                FROM Movie_Audience__c
                WHERE Movie_Night__c IN :movieNightIds AND Contact__r.Id != :contactId 
                AND Contact__r.Id NOT IN :excludeContactIds
                ORDER BY Contact__r.FirstName ASC
            ];
            for (Movie_Audience__c ma : myContacts) {
                contacts.add(ma.Contact__r);
            }
            
            // de-depulicate list
            Set<Contact> contactSet = new Set<Contact>(contacts);
            List<Contact> contactList = new List<Contact>(contactSet);
            
            return contactList;
        }
    }
    
    // return list of audience members attending the current movie night
    public List<Contact> confirmedAudience {
        get {
            List<Contact> contacts = new List<Contact>();
            
            // get list of contacts from current movie night audience where attending = true
            List<Movie_Audience__c> maContacts = [
                SELECT Id, Contact__r.Id, Contact__r.FirstName, Contact__r.LastName, Movie_Night__c, 
                Attending__c
                FROM Movie_Audience__c
                WHERE Movie_Night__c = :mn.Id AND Attending__c = true AND Contact__r.Id != :contactId
                ORDER BY Contact__r.FirstName ASC
            ];
            for (Movie_Audience__c ma : maContacts) {
                contacts.add(ma.Contact__r);
            }
            return contacts;
        }
    }
    
    // return list of audience members NOT attending the current movie night
    public List<Contact> unconfirmedAudience {
        get {
            List<Contact> contacts = new List<Contact>();
            
            // get list of contacts from current movie night audience where attending = false
            List<Movie_Audience__c> maContacts = [
                SELECT Id, Contact__r.Id, Contact__r.FirstName, Contact__r.LastName, Movie_Night__c, 
                Attending__c
                FROM Movie_Audience__c
                WHERE Movie_Night__c = :mn.Id AND Attending__c = false AND Contact__r.Id != :contactId
                ORDER BY Contact__r.FirstName ASC
            ];
            for (Movie_Audience__c ma : maContacts) {
                contacts.add(ma.Contact__r);
            }
            return contacts;
        }
    }
    
    // return list of unregistered audience members for the current movie night
    public List<String> unregisteredAudience {
        get {
            List<String> emailList = new List<String>();
            // create list of email addresses from current "unregistered audience" field
            if (mn.Unregistered_Audience__c != null) {
                List<String> ua = String.escapeSingleQuotes(mn.Unregistered_Audience__c).replace(' ', '').split(',');
                for (String s : ua) {
                    if (s.length() > 0) {
                        emailList.add(s);
                    }
                }
            }
            return emailList;
        }
    }
    
    // create new movie night event
    public String inputDate {get;set;}
    public String contactIds {get;set;}
    public PageReference createMovieNight() {
        // convert form datetime into showtime
        inputDate = inputDate.replace('T', ' ');
        mn.Showtime__c = Datetime.valueOf(inputDate + ':00');
        
        // create new movie night
        insert mn;
        System.debug('mn.ua: ' + mn.Unregistered_Audience__c);
                
        // add creator and selected contacts to audience
        List<Movie_Audience__c> maList = new List<Movie_Audience__c>();
        Movie_Audience__c me = new Movie_Audience__c();
        me.Movie_Night__c = mn.Id;
        me.Contact__c = contactId;
        me.Attending__c = true;
        maList.add(me);
        System.debug('contactIds: ' + contactIds);
        if (contactIds != '') {
            List<String> contactIdList = contactIds.split(',');
            for (String s : contactIdList) {
                Movie_Audience__c ma = new Movie_Audience__c();
                ma.Movie_Night__c = mn.Id;
                ma.Contact__c = s;
                maList.add(ma);
            }
        }
        insert maList;
        
        // create list of email addresses from current "unregistered audience" field
        String ua = '';
        if (mn.Unregistered_Audience__c != null) {
            ua = String.escapeSingleQuotes(mn.Unregistered_Audience__c).replace(' ', '');
        }
        List<String> emailAddressList = ua.split(',');
        for (String s : emailAddressList) {
            System.debug('emailAddressList: ' + s);
        }
        
        // lookup email addresses to determine existing users/contacts
        List<User> audienceList = [
            SELECT Id, Email, Contact.Id, IsActive
            FROM User
            WHERE Email IN :emailAddressList AND Contact.Id != null AND IsActive = true
        ];
        System.debug('audienceList.size(): ' + audienceList.size());
        
        // add registered memebers to audience
        List<Movie_Audience__c> newAudience = new List<Movie_Audience__c>();
        for (User u : audienceList) {
            Movie_Audience__c registered = new Movie_Audience__c();
            registered.Movie_Night__c = mn.Id;
            registered.Contact__c = u.Contact.Id;
            newAudience.add(registered);
        }
        System.debug('newAudience.size(): ' + newAudience.size());
        insert newAudience;
        
        // update list of unregistered audience members
        String newUnregisteredAudience = '';
        Set<String> audienceSet = new Set<String>();
        for (User u : audienceList) {
            audienceSet.add(u.Email);
            System.debug('registered: ' + u.Email);
        }
        // check each email from the unregistered list
        // if it does not exist in the audience set, re-add it to the unregistered CSV
        for (String s : emailAddressList) {
            System.debug('full list: ' + s);
            if (!audienceSet.contains(s)) {
                newUnregisteredAudience += s + ',';
            }
        }
        System.debug('unregistered: ' + newUnregisteredAudience);
        mn.Unregistered_Audience__c = newUnregisteredAudience;
        update mn;
        
        // TODO: send email invitations
        
        
        // return movie night page
        PageReference page = System.Page.MovieNight;
        page.getParameters().put('id', mn.Id);
        page.setRedirect(true);
        return page;
    }
    
    // update current movie night event
    public String displayInputDate {
        get {
            if (mn.Id != null) {
                Datetime dt = mn.Showtime__c;
                String st = dt.format('yyyy-MM-dd') + 'T' + dt.format('HH:mm');
                return st;
            }
            return null;
        }
        set;
    }
    public String newEmailAudience {get;set;}
    public String removeContactIds {get;set;}
    public String removeEmails {get;set;}
    public PageReference updateMovieNight() {
        
        // convert form datetime into showtime
        inputDate = inputDate.replace('T', ' ');
        mn.Showtime__c = Datetime.valueOf(inputDate + ':00');
        
        // update movie night
        update mn;
        
        // add selected contacts to audience
        List<Movie_Audience__c> maList = new List<Movie_Audience__c>();
        System.debug('contactIds: ' + contactIds);
        if (contactIds != '') {
            List<String> contactIdList = contactIds.split(',');
            for (String s : contactIdList) {
                Movie_Audience__c ma = new Movie_Audience__c();
                ma.Movie_Night__c = mn.Id;
                ma.Contact__c = s;
                maList.add(ma);
            }
        }
        insert maList;
        
        // create list of email addresses from new "unregistered audience" field
        String ua = '';
        if (newEmailAudience != null) {
            ua = String.escapeSingleQuotes(newEmailAudience).replace(' ', '');
        }
        List<String> emailAddressList = ua.split(',');
        for (String s : emailAddressList) {
            System.debug('emailAddressList: ' + s);
        }
        
        // lookup email addresses to determine existing users/contacts
        List<User> audienceList = [
            SELECT Id, Email, Contact.Id, IsActive
            FROM User
            WHERE Email IN :emailAddressList AND Contact.Id != null AND IsActive = true
        ];
        System.debug('audienceList.size(): ' + audienceList.size());
        
        // add registered memebers to audience
        List<Movie_Audience__c> newAudience = new List<Movie_Audience__c>();
        for (User u : audienceList) {
            Movie_Audience__c registered = new Movie_Audience__c();
            registered.Movie_Night__c = mn.Id;
            registered.Contact__c = u.Contact.Id;
            newAudience.add(registered);
        }
        System.debug('newAudience.size(): ' + newAudience.size());
        insert newAudience;
        
        // update list of unregistered audience members
        String newUnregisteredAudience = '';
        Set<String> audienceSet = new Set<String>();
        for (User u : audienceList) {
            audienceSet.add(u.Email);
            System.debug('registered: ' + u.Email);
        }
        // check each email from the unregistered list
        // if it does not exist in the audience set, re-add it to the unregistered CSV
        for (String s : emailAddressList) {
            System.debug('full list: ' + s);
            if (!audienceSet.contains(s)) {
                newUnregisteredAudience += s + ',';
            }
        }
        System.debug('unregistered: ' + newUnregisteredAudience);
        mn.Unregistered_Audience__c += newUnregisteredAudience;
        update mn;
        
        // remove selected contacts from audience
        List<Movie_Audience__c> maRemoveList = new List<Movie_Audience__c>();
        System.debug('removeContactIds: ' + removeContactIds);
        if (removeContactIds != '') {
            removeContactIds = String.escapeSingleQuotes(removeContactIds);
            List<String> contactIdList = removeContactIds.split(',');
            maList = [
                SELECT Id, Contact__c, Movie_Night__c
                FROM Movie_Audience__c
                WHERE Contact__c IN :contactIdList AND Movie_Night__c = :mn.Id
            ];
            delete maList;
        }
        
        // remove selected emails from unregistered audience
        if (removeEmails != '') {
            List<String> uninvitedList = removeEmails.split(',');
            String currentEmails = mn.Unregistered_Audience__c;
            for (String s : uninvitedList) {
                currentEmails = currentEmails.remove(s);
            }
            mn.Unregistered_Audience__c = currentEmails;
            update mn;
        }
        
        // TODO: send email invitations
        
        
        // return movie night page
        PageReference page = System.Page.MovieNight;
        page.getParameters().put('id', mn.Id);
        page.setRedirect(true);
        return page;
    }
    
    // delete movie night event
    public PageReference deleteMovieNight() {
        delete mn;
        
        // return movie night page
        PageReference page = System.Page.MovieNight;
        page.setRedirect(true);
        return page;
    }
    
    // reformat showtime for current movie night
    public String showtime {
        get {
            if (mn.Id != null) {
                Datetime dt = mn.Showtime__c;
                String st = dt.format('E M/d/yyyy h:mm') + dt.format('a').toLowerCase();
                return st;
            }
            return null;
        }
    }

    // reformat showtime for current movie night, longer version
    public String longShowtime {
        get {
            if (mn.Id != null) {
                Datetime dt = mn.Showtime__c;
                String st = dt.format('EEEE M/d/yyyy h:mm') + dt.format('a').toLowerCase() + ' ' + dt.format('z');
                return st;
            }
            return null;
        }
    }
    
    // determine if current user is attending current movie night
    public Boolean isAttending {
        get {
            return [
                SELECT Attending__c
                FROM Movie_Audience__c
                WHERE Contact__c = :contactId AND Movie_Night__c = :mn.Id
            ].Attending__c;
        }
    }
    
    // toggle whether or not the user is attending current movie night
    public void toggleAttending() {
        Movie_Audience__c ma = [
            SELECT Id, Attending__c, Contact__c, Movie_Night__c
            FROM Movie_Audience__c
            WHERE Contact__c = :contactId AND Movie_Night__c = :mn.Id
        ];
        if (isAttending) {
            ma.Attending__c = false;
        } else {
            ma.Attending__c = true;
        }
        update ma;
    }
    
    // get list of movie suggestions for current movie night
    public List<Movie_Suggestion__c> suggestedMovies {
        get {
            if (mn.Id != null) {
                // filter by list of attending contacts
                List<Movie_Audience__c> maAttending = [
                    SELECT Contact__c
                    FROM Movie_Audience__c
                    WHERE Movie_Night__c = :mn.Id AND Attending__c = true
                ];
                List<String> maAttendingIds = new List<String>();
                for (Movie_Audience__c ma : maAttending) {
                    maAttendingIds.add(ma.Contact__c);
                }
                
                return [
                    SELECT Id, Name, IMDB_Id__c, Movie_Night__c, CreatedDate, Year__c, Poster__c, Rated__c,
                    Runtime__c, Plot__c, Vote_Score__c, CreatedBy.ContactId, 
                    (
                        SELECT Contact__c, Type__c 
                        FROM Movie_Votes__r
                        WHERE Contact__c IN :maAttendingIds AND Type__c IN ('Upvote', 'Downvote')
                    )
                    FROM Movie_Suggestion__c 
                    WHERE Movie_Night__c = :mn.Id AND CreatedBy.ContactId IN :maAttendingIds
                    ORDER BY Vote_Score__c DESC, CreatedDate ASC
                ];
            } else {
                return null;
            }
        }
    }

    // search movie titles via OMDb and return results
    public String userQuery {get;set;}
    public List<OMDbResult> omdbResultList = new List<OMDbResult>();
    public List<OMDbResult> omdbList {
        get {
            return omdbResultList;
        }
    }
    public void searchOmdb() {
        
        // get user query from URL parameters
        if (ApexPages.currentPage().getParameters().get('titlesearch') != null) {
            userQuery = ApexPages.currentPage().getParameters().get('titlesearch');
            
            // sanitize user query
            String movieTitle = String.escapeSingleQuotes(userQuery).replaceAll(' ', '+');

            // get API token from custom settings
            String token = [
                SELECT Name, Token__c FROM API_Tokens__c WHERE Name = 'OMDb' LIMIT 1
            ].Token__c;
                        
            // web callout
            Http http = new Http();
            HttpRequest request = new HttpRequest();
            request.setEndpoint('http://www.omdbapi.com/?apikey=' + token + '&type=movie&s=' + movieTitle);
            request.setMethod('GET');
            HttpResponse response = http.send(request);
            String responseBody = response.getBody();
            
            // check for successful JSON data
            if (response.getStatusCode() == 200) {
                // parse data from JSON
                JSONParser parser = JSON.createParser(responseBody);
                while (parser.nextToken() != null) {
                    // start at the array of results
                    if (parser.getCurrentToken() == JSONToken.START_ARRAY) {
                        while (parser.nextToken() != null) {
                            // advance to the start object marker to find next result
                            if (parser.getCurrentToken() == JSONToken.START_OBJECT) {
                                // read entire result object, including its array of reviews
                                OMDbResult movie = (OMDbResult)parser.readValueAs(OMDbResult.class);
                                omdbResultList.add(movie);
                            }
                        }
                    }
                }
                // refresh search results
            } else {
                // return error
            }
        }
        System.debug('omdbResultList.size(): ' + omdbResultList.size());
    }
    
    // use IMDB id to add to list of suggestions for movie night
    public void suggestMovie() {
        
        // get IMDB id from user selection
            String imdb = ApexPages.currentPage().getParameters().get('imdb');
        
        // create set of IMDB ids from currently suggested movies and check for duplicates
        Set<String> currentImdbIds = new Set<String>();
        for (Movie_Suggestion__c ms : suggestedMovies) {
            currentImdbIds.add(ms.IMDB_Id__c);
        }
        if (!currentImdbIds.contains(imdb)) {
                        
            // get API token from custom settings
            String token = [
                SELECT Name, Token__c FROM API_Tokens__c WHERE Name = 'OMDb' LIMIT 1
            ].Token__c;
            
            // web callout to OMDb
            Http http = new Http();
            HttpRequest request = new HttpRequest();
            request.setEndpoint('http://www.omdbapi.com/?apikey=' + token + '&i=' + imdb);
            request.setMethod('GET');
            HttpResponse response = http.send(request);
            String responseBody = response.getBody();
            
            // check for successful JSON data
            if (response.getStatusCode() == 200) {
                // parse data from JSON
                JSONParser parser = JSON.createParser(responseBody);
                while (parser.nextToken() != null) {
                    // start at the array of results
                    if (parser.getCurrentToken() == JSONToken.START_OBJECT) {
                        // read entire result object, including its array of reviews
                        OMDbMovie movie = (OMDbMovie)parser.readValueAs(OMDbMovie.class);
                        // copy data to new movie selection object
                        Movie_Suggestion__c newSuggestion = new Movie_Suggestion__c();
                        newSuggestion.Movie_Night__c = mn.Id;
                        if (movie.Title.length() > 80) {
                            newSuggestion.Name = movie.Title.left(77) + '...';
                        } else {
                            newSuggestion.Name = movie.Title;
                        }
                        newSuggestion.Year__c = movie.Year;
                        newSuggestion.Rated__c = movie.Rated;
                        newSuggestion.Runtime__c = movie.Runtime;
                        // trim plot text if larger than 255 characters
                        if (movie.Plot.length() > 255) {
                            newSuggestion.Plot__c = movie.Plot.left(252) + '...';
                        } else {
                            newSuggestion.Plot__c = movie.Plot;
                        }
                        newSuggestion.Poster__c = movie.Poster;
                        newSuggestion.IMDB_Id__c = movie.ImdbId;
                        insert newSuggestion;
                        parser.skipChildren();
                        
                        // insert upvote for new suggestion
                        Movie_Vote__c mv = new Movie_Vote__c();
                        mv.Contact__c = contactId;
                        mv.Movie_Suggestion__c = newSuggestion.Id;
                        mv.Type__c = 'Upvote';
                        insert mv;
                    }
                }
            }
        }
    }
    
    // inner classes used for serialization by JSON parser
    public class OMDbResult {
        public String Title {get;set;}
        public String Year {get;set;}
        public String Poster {get;set;}
        public String ImdbId {get;set;}
        
        public OMDbResult(String t, String y, String p, String i) {
            Title = t;
            Year = y;
            Poster = p;
            ImdbId = i;
        }
    }
    
    public class OMDbMovie {
        public String Title {get;set;}
        public String Year {get;set;}
        public String Rated {get;set;}
        public String Runtime {get;set;}
        public String Plot {get;set;}
        public String Poster {get;set;}
        public String ImdbId {get;set;}
        // List<Review> Reviews {get;set;}
        
        public OMDbMovie(String ti, String ye, String ra, String ru, String pl, String po, String im) {
            Title = ti;
            Year = ye;
            Rated = ra;
            Runtime = ru;
            Plot = pl;
            Poster = po;
            ImdbId = im;
            // Reviews = omdbReviews.clone();
        }
    }
    
    public class Review {
        public String Source {get;set;}
        public String Value {get;set;}
    }
    
    // find top movie suggestion
    public List<Movie_Suggestion__c> topSuggestion {
        get {
            // get list of all suggestions for current movie night, sorted by score
            List<Movie_Suggestion__c> msList = [
                SELECT Id, CreatedDate, Name, Movie_Night__c, Vote_Score__c, Year__c
                FROM Movie_Suggestion__c
                WHERE Movie_Night__c = :mn.Id
                ORDER BY Vote_Score__c DESC, CreatedDate ASC
            ];
            
            // get top score from list, compare each suggestion with top score
            List<Movie_Suggestion__c> winners = new List<Movie_Suggestion__c>();
            Integer topScore = Integer.valueOf(msList[0].Vote_Score__c);
            for (Movie_Suggestion__c ms : msList) {
                if (ms.Vote_Score__c == topScore) {
                    winners.add(ms);
                }
            }
            
            return winners;
        }
    }
    
    // insert movie vote
    private void voteMovie(String vType) {
        String msId = ApexPages.currentPage().getParameters().get('selectedMovieSuggestionId');
        
        // check existing votes to prevent duplicates
        List<Movie_Vote__c> existingVotes = [
            SELECT Id, Contact__c, Movie_Suggestion__c, Type__c
            FROM Movie_Vote__c
            WHERE Contact__c = :contactId AND Movie_Suggestion__c = :msId AND Type__c IN ('Upvote', 'Downvote')
        ];
        
        // insert new vote if no duplicates found
        if (existingVotes.size() == 0) {
            Movie_Vote__c movieVote = new Movie_Vote__c();
            movieVote.Contact__c = contactId;
            movieVote.Movie_Suggestion__c = msId;
            movieVote.Type__c = vType;
            insert movieVote;
        }
        
        // update movie title on movie night
        if (topSuggestion.size() == 1) {
            mn.Movie_Title__c = topSuggestion[0].Name + ' (' + topSuggestion[0].Year__c + ')';
            update mn;
        } else if (topSuggestion.size() > 1) {
            String topSuggestions = 'Tied between the following... ';
            for (Movie_Suggestion__c ms : topSuggestion) {
                topSuggestions += ms.Name + ' (' + topSuggestion[0].Year__c + ')' + ', ';
            }
            topSuggestions = topSuggestions.left(topSuggestions.length() - 2);
            mn.Movie_Title__c = topSuggestions;
            update mn;
        }
        
    }
    
    // submit movie upvote
    public void upvoteMovie() {
        this.voteMovie('Upvote');
    }
    
    // submit movie downvote
    public void downvoteMovie() {
        this.voteMovie('Downvote');
    }
    
    // get list of attendees bringing refreshments for current movie night
    public List<Movie_Audience__c> rContributors {
        get {
            if (mn.Id != null) {
                // get list of contacts attending the current movie night
                List<Movie_Audience__c> maList = [
                    SELECT Id, Attending__c, Movie_Night__c, Contact__r.Id, Contact__r.Name
                    FROM Movie_Audience__c
                    WHERE Movie_Night__c = :mn.Id AND Attending__c = true
                    ORDER BY Contact__r.Name ASC
                ];
                
                // get set of contact IDs brining refreshments to current movie night
                Set<String> rcSet = new Set<String>();
                for (Refreshment__c r : refreshments) {
                    rcSet.add(r.CreatedBy.ContactId);
                }
                
                // add contacts in set to filtered list
                List<Movie_Audience__c> maListFiltered = new List<Movie_Audience__c>();
                for (Movie_Audience__c ma : maList) {
                    if (rcSet.contains(ma.Contact__r.Id)) {
                        maListFiltered.add(ma);
                    }
                }
                
                return maListFiltered;
            } else {
                return null;
            }
        }
    }
    
    // get list of refreshments for current movie night
    public List<Refreshment__c> refreshments {
        get {
            if (mn.Id != null) {
                return [
                    SELECT Id, Name, Movie_Night__c, CreatedBy.Id, CreatedBy.ContactId
                    FROM Refreshment__c 
                    WHERE Movie_Night__c = :mn.Id
                    ORDER BY CreatedDate ASC
                ];
            } else {
                return null;
            }
        }
    }
    
    // add new refreshment to current movie night
    public String newRefreshment {get;set;}
    public void submitRefreshment() {
        Refreshment__c nr = new Refreshment__c();
        nr.Name = newRefreshment;
        nr.Movie_Night__c = mn.Id;
        insert nr;
    }
    
    // remove refreshment from movie night
    public void removeItem() {
        
        // get item id from user selection
        String item = ApexPages.currentPage().getParameters().get('ritem');
        
        Refreshment__c rItem = [
            SELECT Id
            FROM Refreshment__c
            WHERE Id = :item
        ];
        delete rItem;
        
    }
}