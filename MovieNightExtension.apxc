/*************************************************
 * lmnop Movie Night Controller Extension
 * Test code provided by lmnopTest
 * 
 * DATE			DEV		NOTES
 * 2019-01-14	TKC		Initial creation
 * 2019-01-15	TKC		Removed login controls (sticking with standard controllers)
 * 2019-01-17	TKC		Added lmnop disclaimer acknowledgement
 * 2019-01-18	TKC		Added new movie night submission controls
 * 2019-01-22	TKC		Added mnWrapped inner class and replaced "nms" movie night list with new custom list
*************************************************/

public class MovieNightExtension {
    
    // extend movie night standard controller
    private final Movie_Night__c mn;
    public MovieNightExtension(ApexPages.StandardController stdController) {
        this.mn = (Movie_Night__c)stdController.getRecord();
        this.mnsUpcoming = new List<maWrapped>();
        for (Movie_Audience__c ma : [
            SELECT Id, Movie_Night__r.Id, Movie_Night__r.Showtime__c, Movie_Night__r.Movie_Title__c,
            Movie_Night__r.Location__c, Movie_Night__r.Countdown__c
            FROM Movie_Audience__c 
            WHERE Contact__c = :contactId AND Movie_Night__r.Showtime__c > :Datetime.now()
            ORDER BY Movie_Night__r.Showtime__c DESC
        ]) {
            mnsUpcoming.add(new maWrapped(ma));
        }
        this.mnsPast = new List<maWrapped>();
        for (Movie_Audience__c ma : [
            SELECT Id, Movie_Night__r.Id, Movie_Night__r.Showtime__c, Movie_Night__r.Movie_Title__c,
            Movie_Night__r.Location__c, Movie_Night__r.Countdown__c
            FROM Movie_Audience__c 
            WHERE Contact__c = :contactId AND Movie_Night__r.Showtime__c <= :Datetime.now()
            ORDER BY Movie_Night__r.Showtime__c DESC
        ]) {
            mnsPast.add(new maWrapped(ma));
        }
    }
    
    // get current user's contact id
    public String contactId = [SELECT ContactId FROM User WHERE Id = :UserInfo.getUserId()].ContactId;

    // check disclaimer acknowledgement
    public Boolean acknowledged {
        get {
            DateTime aDate = [
                SELECT lmnop_Disclaimer_Acknowledged__c 
                FROM User 
                WHERE Id = :UserInfo.getUserId()
            ].lmnop_Disclaimer_Acknowledged__c;
            if (aDate != null) {
                return true;
            } else {
                return false;
            }
        }
    }
    
    // set disclaimer acknowledgement
    public PageReference recordAcknowledgement() {
        // set the custom acknowledged date/time to now
        User currentUser = [
            SELECT Id, lmnop_Disclaimer_Acknowledged__c
            FROM User
            WHERE Id = :UserInfo.getUserId()
        ];
        currentUser.lmnop_Disclaimer_Acknowledged__c = DateTime.now();
        update currentUser;
        
        // take the user to the profile page so they can update their profile etc
        PageReference page = System.Page.Profile;
        page.setRedirect(true);
        return page;
    }
    
    // get list of movie nights for current user
    public List<maWrapped> mnsUpcoming {get;set;}
    public List<maWrapped> mnsPast {get;set;}
    
    // wrapper for modifying the showtime datetime format within the list of movie nights
    public class maWrapped {
        public Movie_Audience__c maRecord {get;set;}
        public String formattedShowtime {
            get {
                return maRecord.Movie_Night__r.Showtime__c.format('EEEEE M/d/yyyy h:mm') 
                    + maRecord.Movie_Night__r.Showtime__c.format('a').toLowerCase();
            }
        }
        
        // contructors for wrapper class
        public maWrapped() {}
        public maWrapped(Movie_Audience__c ma) {
            this();
            this.maRecord = ma;
        }
    }
    
    // return list of previous audience members
    public List<Contact> previousAudience {
        get {
            List<Contact> contacts = new List<Contact>();
            
            // build list of movie nights for the current user
            List<Movie_Audience__c> myMovieNights = [
                SELECT Id, Contact__c, Movie_Night__c 
                FROM Movie_Audience__c
                WHERE Contact__c = :contactId
            ];
            List<String> movieNightIds = new List<String>();
            for (Movie_Audience__c ma : myMovieNights) {
                movieNightIds.add(ma.Movie_Night__c);
            }
            
            // build list of contacts from the user's previous movie nights
            List<Movie_Audience__c> myContacts = [
                SELECT Id, Contact__r.Id, Contact__r.FirstName, Contact__r.LastName, Movie_Night__c
                FROM Movie_Audience__c
                WHERE Movie_Night__c IN :movieNightIds AND Contact__r.Id != :contactId
                ORDER BY Contact__r.FirstName ASC
            ];
            for (Movie_Audience__c ma : myContacts) {
                contacts.add(ma.Contact__r);
            }
            
            // de-depulicate list
            Set<Contact> contactSet = new Set<Contact>(contacts);
            List<Contact> contactList = new List<Contact>(contactSet);
            
            return contactList;
        }
    }
    
    // create new movie night event
    public String inputDate {get;set;}
    public String contactIds {get;set;}
    public PageReference createMovieNight() {
        // convert form datetime into showtime
        inputDate = inputDate.replace('T', ' ');
        mn.Showtime__c = Datetime.valueOf(inputDate + ':00');
        
        // create new movie night
        insert mn;
        
        // add creator and selected contacts to audience
        List<Movie_Audience__c> maList = new List<Movie_Audience__c>();
        Movie_Audience__c me = new Movie_Audience__c();
        me.Movie_Night__c = mn.Id;
        me.Contact__c = contactId;
        maList.add(me);
        System.debug('contactIds: ' + contactIds);
        if (contactIds != '') {
            List<String> contactIdList = contactIds.split(',');
            for (String s : contactIdList) {
                Movie_Audience__c ma = new Movie_Audience__c();
                ma.Movie_Night__c = mn.Id;
                ma.Contact__c = s;
                maList.add(ma);
            }
        }
        insert maList;
        
        // create list of email addresses from current "unregistered audience" field
        String ua = '';
        if (mn.Unregistered_Audience__c != null) {
            String.escapeSingleQuotes(mn.Unregistered_Audience__c).replace(' ', '');
        }
        List<String> emailAddressList = ua.split(',');
        for (String s : emailAddressList) {
            System.debug('emailAddressList: ' + s);
        }
        
        // lookup email addresses to determine existing users/contacts
        List<User> audienceList = [
            SELECT Id, Email, Contact.Id, IsActive
            FROM User
            WHERE Email IN :emailAddressList AND Contact.Id != null AND IsActive = true
        ];
        System.debug('audienceList.size(): ' + audienceList.size());
        
        // add registered memebers to audience
        List<Movie_Audience__c> newAudience = new List<Movie_Audience__c>();
        for (User u : audienceList) {
            Movie_Audience__c registered = new Movie_Audience__c();
            registered.Movie_Night__c = mn.Id;
            registered.Contact__c = u.Contact.Id;
            newAudience.add(registered);
        }
        System.debug('newAudience.size(): ' + newAudience.size());
        insert newAudience;
        
        // update list of unregistered audience members
        String newUnregisteredAudience = '';
        Set<String> audienceSet = new Set<String>();
        for (User u : audienceList) {
            audienceSet.add(u.Email);
            System.debug('registered: ' + u.Email);
        }
        // check each email from the unregistered list
        // if it does not exist in the audience set, re-add it to the unregistered CSV
        for (String s : emailAddressList) {
            System.debug('full list: ' + s);
            if (!audienceSet.contains(s)) {
                newUnregisteredAudience += s + ',';
            }
        }
        System.debug('unregistered: ' + newUnregisteredAudience);
        mn.Unregistered_Audience__c = newUnregisteredAudience;
        update mn;
        
        // TODO: send email invitations
        
        
        // return movie night page
        PageReference page = System.Page.MovieNight;
        page.getParameters().put('id', mn.Id);
        page.setRedirect(true);
        return page;
    }
    
    // get list of movie suggestions for current movie night
    public List<Movie_Suggestion__c> suggestedMovies {
        get {
            if (mn.Id != null) {
                return [
                    SELECT Id, Name, IMDB_Id__c, Movie_Night__c, CreatedDate
                    FROM Movie_Suggestion__c 
                    WHERE Movie_Night__c = :mn.Id
                    ORDER BY CreatedDate ASC
                ];
            } else {
                return null;
            }
        }
    }
        
    // search movie titles via OMDb and return results
    public String userQuery {get;set;}
    public List<OMDbResult> omdbResultList = new List<OMDbResult>();
    public List<OMDbResult> omdbList {
        get {
            return omdbResultList;
        }
    }
    public void searchOmdb() {
        
        // get user query from URL parameters
        if (ApexPages.currentPage().getParameters().get('titlesearch') != null) {
            userQuery = ApexPages.currentPage().getParameters().get('titlesearch');
            
            // sanitize user query
            String movieTitle = String.escapeSingleQuotes(userQuery).replaceAll(' ', '+');

            // get API token from custom settings
            String token = [
                SELECT Name, Token__c FROM API_Tokens__c WHERE Name = 'OMDb' LIMIT 1
            ].Token__c;
                        
            // web callout
            Http http = new Http();
            HttpRequest request = new HttpRequest();
            request.setEndpoint('http://www.omdbapi.com/?apikey=' + token + '&type=movie&s=' + movieTitle);
            request.setMethod('GET');
            HttpResponse response = http.send(request);
            String responseBody = response.getBody();
            
            // check for successful JSON data
            if (response.getStatusCode() == 200) {
                // parse data from JSON
                JSONParser parser = JSON.createParser(responseBody);
                while (parser.nextToken() != null) {
                    // start at the array of results
                    if (parser.getCurrentToken() == JSONToken.START_ARRAY) {
                        while (parser.nextToken() != null) {
                            // advance to the start object marker to find next result
                            if (parser.getCurrentToken() == JSONToken.START_OBJECT) {
                                // read entire result object, including its array of reviews
                                OMDbResult movie = (OMDbResult)parser.readValueAs(OMDbResult.class);
                                omdbResultList.add(movie);
                            }
                        }
                    }
                }
                // refresh search results
            } else {
                // return error
            }
        }
        System.debug('omdbResultList.size(): ' + omdbResultList.size());
    }
    
    // use IMDB id to add to list of suggestions for movie night
    public void suggestMovie() {
        
        // get IMDB id from user selection
            String imdb = ApexPages.currentPage().getParameters().get('imdb');
        
        // create set of IMDB ids from currently suggested movies and check for duplicates
        Set<String> currentImdbIds = new Set<String>();
        for (Movie_Suggestion__c ms : suggestedMovies) {
            currentImdbIds.add(ms.IMDB_Id__c);
        }
        if (!currentImdbIds.contains(imdb)) {
                        
            // get API token from custom settings
            String token = [
                SELECT Name, Token__c FROM API_Tokens__c WHERE Name = 'OMDb' LIMIT 1
            ].Token__c;
            
            // web callout to OMDb
            Http http = new Http();
            HttpRequest request = new HttpRequest();
            request.setEndpoint('http://www.omdbapi.com/?apikey=' + token + '&i=' + imdb);
            request.setMethod('GET');
            HttpResponse response = http.send(request);
            String responseBody = response.getBody();
            
            // check for successful JSON data
            if (response.getStatusCode() == 200) {
                // parse data from JSON
                JSONParser parser = JSON.createParser(responseBody);
                while (parser.nextToken() != null) {
                    // start at the array of results
                    if (parser.getCurrentToken() == JSONToken.START_OBJECT) {
                        // read entire result object, including its array of reviews
                        OMDbMovie movie = (OMDbMovie)parser.readValueAs(OMDbMovie.class);
                        // copy data to new movie selection object
                        Movie_Suggestion__c newSuggestion = new Movie_Suggestion__c();
                        newSuggestion.Movie_Night__c = mn.Id;
                        newSuggestion.Name = movie.Title;
                        newSuggestion.Year__c = movie.Year;
                        newSuggestion.Rated__c = movie.Rated;
                        newSuggestion.Runtime__c = movie.Runtime;
                        // trim plot text if larger than 255 characters
                        if (movie.Plot.length() > 255) {
                            newSuggestion.Plot__c = movie.Plot.left(252) + '...';
                        } else {
                            newSuggestion.Plot__c = movie.Plot;
                        }
                        newSuggestion.Poster__c = movie.Poster;
                        newSuggestion.IMDB_Id__c = movie.ImdbId;
                        insert NewSuggestion;
                        parser.skipChildren();
                    }
                }
            }
        }
    }
    
    // inner classes used for serialization by JSON parser
    public class OMDbResult {
        public String Title {get;set;}
        public String Year {get;set;}
        public String Poster {get;set;}
        public String ImdbId {get;set;}
        
        public OMDbResult(String t, String y, String p, String i) {
            Title = t;
            Year = y;
            Poster = p;
            ImdbId = i;
        }
    }
    
    public class OMDbMovie {
        public String Title {get;set;}
        public String Year {get;set;}
        public String Rated {get;set;}
        public String Runtime {get;set;}
        public String Plot {get;set;}
        public String Poster {get;set;}
        public String ImdbId {get;set;}
        // List<Review> Reviews {get;set;}
        
        public OMDbMovie(String ti, String ye, String ra, String ru, String pl, String po, String im) {
            Title = ti;
            Year = ye;
            Rated = ra;
            Runtime = ru;
            Plot = pl;
            Poster = po;
            ImdbId = im;
            // Reviews = omdbReviews.clone();
        }
    }
    
    public class Review {
        public String Source {get;set;}
        public String Value {get;set;}
    }
}